Étape 1 : Accéder à Azure Cloud Shell

1. Connectez-vous au portail Azure avec vos identifiants.


2. Cliquez sur l'icône Cloud Shell en haut à droite (icône de terminal).


3. Choisissez PowerShell comme environnement si ce n'est pas déjà configuré.




---

Étape 2 : Préparer l'environnement Cloud Shell

1. Une fois dans Cloud Shell, vérifiez que le module Az est installé (il est généralement préinstallé dans Cloud Shell).


2. Assurez-vous que votre compte Azure est déjà connecté (ce sera fait automatiquement si vous utilisez Cloud Shell dans le portail Azure).




---

Étape 3 : Charger et exécuter le script

1. Créer un nouveau fichier PowerShell :

Dans Cloud Shell, exécutez cette commande pour ouvrir un éditeur intégré (comme nano) :

nano CheckBlobsLastModified.ps1

Copiez-collez le script PowerShell ci-dessous dans l'éditeur.



2. Sauvegarder le fichier :

Dans nano, utilisez CTRL+O pour enregistrer, puis CTRL+X pour quitter l'éditeur.



3. Exécuter le script :

Assurez-vous que le fichier est exécutable avec cette commande :

chmod +x CheckBlobsLastModified.ps1

Lancez le script en exécutant :

./CheckBlobsLastModified.ps1





---

Étape 4 : Téléchargement des résultats CSV

1. Une fois le script terminé, le fichier CSV sera créé dans le répertoire courant de votre session Cloud Shell.


2. Pour télécharger le fichier, utilisez le bouton Télécharger dans le gestionnaire de fichiers intégré à Cloud Shell, ou utilisez cette commande pour copier le fichier vers votre stockage Azure :

az storage blob upload --account-name <STORAGE_ACCOUNT> --container-name <CONTAINER> --file Blobs_Not_Modified_Over_One_Year.csv --name Blobs_Not_Modified_Over_One_Year.csv

Remplacez <STORAGE_ACCOUNT> et <CONTAINER> par vos valeurs.




---

Script PowerShell à coller dans Cloud Shell

Voici le script complet pour vérifier les blobs non modifiés depuis plus d'un an et exporter les résultats en CSV :

# Définir la durée (1 an dans ce cas)
$thresholdDate = (Get-Date).AddYears(-1)

# Initialiser une liste pour stocker les résultats
$results = @()

# Obtenir toutes les souscriptions dans le tenant
$subscriptions = Get-AzSubscription

# Parcourir chaque souscription
foreach ($subscription in $subscriptions) {
    # Changer la souscription active
    Set-AzContext -SubscriptionId $subscription.Id

    Write-Output "Traitement de la souscription : $($subscription.Name)"

    # Obtenir tous les comptes de stockage dans la souscription
    $storageAccounts = Get-AzStorageAccount

    foreach ($storageAccount in $storageAccounts) {
        $context = $storageAccount.Context

        # Obtenir tous les conteneurs dans le compte de stockage
        $containers = Get-AzStorageContainer -Context $context

        foreach ($container in $containers) {
            # Obtenir tous les blobs dans le conteneur
            $blobs = Get-AzStorageBlob -Container $container.Name -Context $context

            foreach ($blob in $blobs) {
                # Vérifier la date de la dernière modification
                if ($blob.ICloudBlob.Properties.LastModified.DateTime -lt $thresholdDate) {
                    # Ajouter les résultats à la liste
                    $results += [PSCustomObject]@{
                        Subscription       = $subscription.Name
                        StorageAccount     = $storageAccount.StorageAccountName
                        Container          = $container.Name
                        BlobName           = $blob.Name
                        LastModified       = $blob.ICloudBlob.Properties.LastModified.DateTime
                    }
                }
            }
        }
    }
}

# Exporter les résultats dans un fichier CSV
$csvPath = "Blobs_Not_Modified_Over_One_Year.csv"
$results | Export-Csv -Path $csvPath -NoTypeInformation -Encoding UTF8

# Afficher un message de confirmation
Write-Output "Les résultats ont été exportés vers : $csvPath"


---

Étape 5 : Résultats

1. Une fois téléchargé, ouvrez le fichier CSV avec Excel ou tout autre outil compatible.


2. Les colonnes incluent les informations suivantes :

Souscription

Compte de stockage

Conteneur

Nom du blob

Dernière modification




Si vous avez besoin d'assistance pour personnaliser le script ou pour utiliser Cloud Shell, n'hésitez pas à demander !

# 1. Définir la date seuil (ici, 1 an)
$thresholdDate = (Get-Date).AddYears(-1)

# 2. Récupérer tous les comptes de stockage
$storageAccounts = Get-AzStorageAccount

# 3. Parcourir chaque compte de stockage
foreach ($storageAccount in $storageAccounts) {

    # Récupérer le contexte du compte
    $context = $storageAccount.Context

    # Récupérer la liste des conteneurs
    $containers = Get-AzStorageContainer -Context $context

    foreach ($container in $containers) {
        # Récupérer tous les blobs du conteneur
        $blobs = Get-AzStorageBlob -Container $container.Name -Context $context

        # Si le conteneur est vide
        if (-not $blobs) {
            Write-Output "Compte de stockage : $($storageAccount.StorageAccountName)"
            Write-Output "Conteneur         : $($container.Name)"
            Write-Output "=> AUCUN blob. Considéré comme non modifié depuis plus d'un an."
            Write-Output "------------------------"
        }
        else {
            # 4. Trouver la dernière date de modification la plus récente parmi tous les blobs
            $maxLastModified = $blobs | 
                Sort-Object { $_.ICloudBlob.Properties.LastModified.DateTime } -Descending |
                Select-Object -First 1 |
                ForEach-Object { $_.ICloudBlob.Properties.LastModified.DateTime }

            # 5. Comparer la date la plus récente avec le seuil
            if ($maxLastModified -lt $thresholdDate) {
                Write-Output "Compte de stockage : $($storageAccount.StorageAccountName)"
                Write-Output "Conteneur         : $($container.Name)"
                Write-Output "Dernière modification (la plus récente) : $maxLastModified"
                Write-Output "=> Non modifié depuis plus d'un an."
                Write-Output "------------------------"
            }
        }
    }
}


#!/bin/bash
# Assurez-vous d'être connecté avec `az login`

# Affichage de l'en-tête (note : la taille est désormais affichée en GB)
echo -e "BlobName\tStorageAccount\tLastModified\tTaille (GB)\tResourceGroup"

# Récupérer la liste des comptes de stockage avec leur groupe de ressources
storageAccounts=$(az storage account list --query "[].{name:name, resourceGroup:resourceGroup}" -o tsv)

# Parcourir chaque compte de stockage
while IFS=$'\t' read -r account resourceGroup; do
    # Récupérer la clé d'accès du compte
    accountKey=$(az storage account keys list --account-name "$account" --query "[0].value" -o tsv)
    
    # Récupérer la liste des conteneurs dans le compte
    containers=$(az storage container list --account-name "$account" --account-key "$accountKey" --query "[].name" -o tsv)
    
    # Parcourir chaque conteneur
    for container in $containers; do
        # Récupérer la liste des blobs dans le conteneur avec le nom, la date de dernière modification et la taille en octets
        blobs=$(az storage blob list \
                  --account-name "$account" \
                  --account-key "$accountKey" \
                  --container-name "$container" \
                  --query "[].{name:name, lastModified:properties.lastModified, size:properties.contentLength}" \
                  -o tsv)
        
        # Parcourir chaque blob et afficher les informations
        while IFS=$'\t' read -r blobName lastModified size; do
            # Convertir la taille en GB (1 GB = 1073741824 octets)
            if [[ -n "$size" ]]; then
                sizeInGB=$(awk "BEGIN {printf \"%.2f\", $size/1073741824}")
            else
                sizeInGB="0.00"
            fi
            echo -e "$blobName\t$account\t$lastModified\t$sizeInGB\t$resourceGroup"
        done <<< "$blobs"
    done
done <<< "$storageAccounts"







#!/bin/bash
# Assurez-vous d'être connecté avec `az login`

# Affichage de l'en-tête
echo -e "BlobName\tStorageAccount\tLastModified\tTaille (octets)\tResourceGroup"

# Récupérer la liste des comptes de stockage avec leur groupe de ressources
storageAccounts=$(az storage account list --query "[].{name:name, resourceGroup:resourceGroup}" -o tsv)

# Parcourir chaque compte de stockage
while IFS=$'\t' read -r account resourceGroup; do
    # Récupérer la clé d'accès du compte
    accountKey=$(az storage account keys list --account-name "$account" --query "[0].value" -o tsv)
    
    # Récupérer la liste des conteneurs dans le compte
    containers=$(az storage container list --account-name "$account" --account-key "$accountKey" --query "[].name" -o tsv)
    
    # Parcourir chaque conteneur
    for container in $containers; do
        # Récupérer la liste des blobs dans le conteneur avec le nom, la date de dernière modification et la taille
        blobs=$(az storage blob list \
                  --account-name "$account" \
                  --account-key "$accountKey" \
                  --container-name "$container" \
                  --query "[].{name:name, lastModified:properties.lastModified, size:properties.contentLength}" \
                  -o tsv)
        
        # Parcourir chaque blob et afficher les informations
        while IFS=$'\t' read -r blobName lastModified size; do
            echo -e "$blobName\t$account\t$lastModified\t$size\t$resourceGroup"
        done <<< "$blobs"
    done
done <<< "$storageAccounts"


#!/bin/bash
# Vérifiez que vous êtes connecté(e) à Azure avec `az login`

# Récupérer la liste des subscriptions du tenant avec leur ID et nom
subscriptions=$(az account list --query "[].{id:id, name:name}" -o tsv)

# Parcourir chaque subscription
while IFS=$'\t' read -r subId subName; do
    echo -e "\n========== Subscription : $subName ($subId) =========="
    # Définir la subscription active
    az account set --subscription "$subId"
    
    # Récupérer la liste des comptes de stockage dans la subscription
    storageAccounts=$(az storage account list --query "[].{name:name, resourceGroup:resourceGroup}" -o tsv)
    
    # Parcourir chaque compte de stockage
    while IFS=$'\t' read -r account resourceGroup; do
        echo -e "\n-- Compte de stockage : $account (Resource Group : $resourceGroup)"
        
        # Récupérer la clé d'accès du compte (nécessaire pour interroger les conteneurs et blobs)
        accountKey=$(az storage account keys list --account-name "$account" --query "[0].value" -o tsv)
        
        # Récupérer la liste des conteneurs dans le compte
        containers=$(az storage container list --account-name "$account" --account-key "$accountKey" --query "[].name" -o tsv)
        
        # Parcourir chaque conteneur
        for container in $containers; do
            echo -e "\nConteneur : $container"
            
            # Récupérer la liste des blobs dans le conteneur avec le nom, la date de dernière modification et la taille (en octets)
            blobs=$(az storage blob list \
                      --account-name "$account" \
                      --account-key "$accountKey" \
                      --container-name "$container" \
                      --query "[].{name:name, lastModified:properties.lastModified, size:properties.contentLength}" \
                      -o tsv)
            
            # Afficher un en-tête pour les blobs du conteneur
            echo -e "BlobName\tStorageAccount\tLastModified\tTaille (GB)\tResourceGroup"
            
            # Parcourir chaque blob et afficher les informations
            while IFS=$'\t' read -r blobName lastModified size; do
                # Conversion de la taille en GB (1 GB = 1073741824 octets)
                if [[ -n "$size" ]]; then
                    sizeInGB=$(awk "BEGIN {printf \"%.2f\", $size/1073741824}")
                else
                    sizeInGB="0.00"
                fi
                echo -e "$blobName\t$account\t$lastModified\t$sizeInGB\t$resourceGroup"
            done <<< "$blobs"
        done
    done <<< "$storageAccounts"
done <<< "$subscriptions"


#!/bin/bash

# Variables
STORAGE_ACCOUNT_NAME="nom_du_compte"
CONTAINER_NAME="nom_du_conteneur"

# Récupérer la clé du compte de stockage (ou utiliser un SAS token)
STORAGE_KEY=$(az storage account keys list --account-name $STORAGE_ACCOUNT_NAME --query "[0].value" --output tsv)

# Lister les blobs contenant "2025" dans leur nom
az storage blob list \
    --account-name $STORAGE_ACCOUNT_NAME \
    --account-key $STORAGE_KEY \
    --container-name $CONTAINER_NAME \
    --query "[?contains(name, '2025')].[name]" \
    --output table
