# -------------------------------------------
# VARIABLES
# -------------------------------------------
$currentDir      = Split-Path $MyInvocation.MyCommand.Path -Parent
$CertWorkingDir  = $currentDir + "\Certs\DEPOSEZ ICI"
$OpenSSLPath     = $currentDir + "\openssl\openssl.exe"

# -------------------------------------------
# FONCTIONS
# -------------------------------------------

# Fonction booléenne pour interaction utilisateur (Yes / No)
function promptBool($question) {
    $type = Read-Host -Prompt $question
    $type = $type.ToLower()
    if ( ($type -eq "y") -or ($type -eq "o") ) {
        return $true
    }
    elseif ($type -eq "n") {
        return $false
    }
    else {
        return promptBool($question)
    }
}

# Fonction de saisie pour déterminer le type de certificat
function promptType {
    $type = Read-Host -Prompt "1- Cert Client+Server / 2- Cert Server"
    if ($type -eq "1") {
        return "1"
    }
    elseif ($type -eq "2") {
        return "2"
    }
    else {
        return promptType
    }
}

# Génération du fichier de configuration pour OpenSSL, selon le type choisi
function genereCfg($type) {
    if ($type -eq "1") {
        return  @"
[ req ]
default_bits       = 4096
default_keyfile    = rui.key
distinguished_name = req_distinguished_name
encrypt_key        = no
prompt             = no
string_mask        = nombstr
req_extensions     = v3_req

[ v3_req ]
basicConstraints = CA:FALSE
keyUsage         = digitalSignature, keyEncipherment, dataEncipherment 
extendedKeyUsage = serverAuth, clientAuth

[ req_distinguished_name ] 
countryName            = FR
stateOrProvinceName    = Rhone-Alpes
localityName           = Lyon
0.organizationName     = ENTREPRISE
organizationalUnitName = DSI
"@
    }
    elseif ($type -eq "2") {
        return @"
oid_section = OIDs

[ OIDs ]
certificateTemplateName = 1.3.6.1.4.1.311.20.2

[ req ]
default_bits       = 4096
default_keyfile    = rui.key
distinguished_name = req_distinguished_name
encrypt_key        = no
prompt             = no
string_mask        = nombstr
req_extensions     = req_ext

[ req_ext ]
basicConstraints     = CA:FALSE
keyUsage             = digitalSignature, keyEncipherment, dataEncipherment 
certificateTemplateName = ASN1:PRINTABLESTRING:ENTREPRISE-AzureServicePrincipal

[ req_distinguished_name ] 
countryName            = FR
stateOrProvinceName    = Rhone-Alpes
localityName           = Lyon
0.organizationName     = ENTREPRISE
organizationalUnitName = DSI
"@
    }
    else {
        # Relance la saisie si erreur
        return genereCfg(promptType)
    }
}

# Choix du template PKI (si vous utilisez un template particulier côté ADCS)
function getTemplate($type) {
    if ($type -eq "1") {
        return "ENTREPRISE-AzureServicePrincipalWithClientAuth"
    }
    elseif ($type -eq "2") {
        return "ENTREPRISE-AzureServicePrincipal"
    }
    else {
        return getTemplate(promptType)
    }
}

# -------------------------------------------
# SCRIPT PRINCIPAL
# -------------------------------------------
try {
    Write-Host -ForegroundColor Green "**** Début du script (Extrait) ****"

    # Parcourt chaque sous-dossier dans "Certs\DEPOSEZ ICI"
    ForEach ($Dir In (Get-ChildItem -Path $CertWorkingDir -Directory)) {
        
        Write-Host -ForegroundColor Cyan "---- Début pour le dossier: $($Dir.Name) ----"
        $name = $Dir.Name
        
        # On se place dans le dossier
        Set-Location -Path $Dir.FullName

        # Vérifier si on doit régénérer le fichier de config OpenSSL
        $generateCfg = $true
        if (Test-Path "csr_openssl.cfg") {
            Write-Host -ForegroundColor Yellow "Le fichier csr_openssl.cfg existe déjà."
            $generateCfg = promptBool("Voulez-vous le régénérer ? [y/n]")
        }

        # Génération du contenu de configuration
        if ($generateCfg) {
            Remove-Item "$($Dir.Name).csr", "$($Dir.Name).cer", "$($Dir.Name).pfx", "$($Dir.Name).key" -Force -ErrorAction SilentlyContinue
            
            $type = promptType
            $cfg  = genereCfg($type)
            $cfg  = $cfg + "`r`nCN=" + $name  # On ajoute le CN en fin de fichier

            $cfg | Out-File -FilePath "csr_openssl.cfg" -Force -Encoding ascii
            Write-Host -ForegroundColor Green "Fichier csr_openssl.cfg généré."
        }

        # Génération (ou régénération) du CSR
        $generateCsr = $true
        if (Test-Path "$($Dir.Name).csr") {
            Write-Host -ForegroundColor Yellow "Le fichier $($Dir.Name).csr existe déjà."
            $generateCsr = promptBool("Voulez-vous le régénérer ? [y/n]")
        }

        if ($generateCsr) {
            # On supprime d'éventuels fichiers existants pour repartir de zéro
            Remove-Item "$($Dir.Name).csr", "$($Dir.Name).cer", "$($Dir.Name).pfx", "$($Dir.Name).key" -Force -ErrorAction SilentlyContinue
            
            Start-Process -FilePath $OpenSSLPath `
                          -ArgumentList "req -new -nodes -out rui.csr -keyout rui.key -config csr_openssl.cfg" `
                          -Wait -ErrorAction Stop

            Move-Item rui.csr "$($Dir.Name).csr" -Force
            Move-Item rui.key "$($Dir.Name).key" -Force
            Write-Host -ForegroundColor Green "CSR ($($Dir.Name).csr) et clé privée ($($Dir.Name).key) générés."
        }

        # Génération (ou régénération) du certificat signé (PKI locale via certreq)
        $generateCer = $true
        if (Test-Path "$($Dir.Name).cer") {
            $certFile = Get-Item -Path "$($Dir.Name).cer"
            $certObj  = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($certFile)

            if ($certObj.NotAfter -lt (Get-Date)) {
                $generateCer = promptBool("Certificat présent, mais expiré. Le régénérer via la PKI ? [y/n]")
            }
            else {
                $generateCer = promptBool("Certificat présent et valide. Le régénérer quand même ? [y/n]")
            }
        }

        if ($generateCer) {
            Write-Host -ForegroundColor Yellow "Demande de certificat via certreq..."
            Move-Item "$($Dir.Name).csr" rui.csr -Force

            certreq -submit -attrib "CertificateTemplate:$(getTemplate($type))" rui.csr rui.cer
            
            Move-Item rui.cer "$($Dir.Name).cer" -Force
            Move-Item rui.csr "$($Dir.Name).csr" -Force
            Remove-Item rui.rsp -Force -ErrorAction SilentlyContinue

            Write-Host -ForegroundColor Green "Certificat signé ($($Dir.Name).cer) récupéré."
        }

        # -- (Optionnel) Génération du .pfx en local, si besoin --
        #   Décommentez si vous voulez toujours créer un .pfx
        #   Note : Ici il n'y a pas de récupération de mot de passe depuis KeePass
        #   Vous pouvez remplacer "PASSWORD_Ici" par un prompt utilisateur, etc.
        #
        # $generatePfx = promptBool("Voulez-vous générer le .pfx local ? [y/n]")
        # if ($generatePfx) {
        #     $password = "PASSWORD_Ici"  # ou Read-Host -Prompt "Entrer mot de passe" -AsSecureString ...
        #     $argPfx = 'pkcs12 -export -inkey "' + $name + '.key" -in "' + $name + '.cer" -out "' + $name + '.pfx" -password pass:' + $password
        #     Start-Process -FilePath $OpenSSLPath -ArgumentList $argPfx -Wait
        #     Write-Host -ForegroundColor Green ".pfx généré : $($name).pfx"
        # }

        # Fin du traitement du dossier
        Write-Host -ForegroundColor Cyan "---- Fin pour le dossier: $($Dir.Name) ----"
    }

    Write-Host -ForegroundColor Magenta "**** Fin du script (Extrait) ****"
}
catch {
    Write-Host $_.Exception.Message -ForegroundColor Red
    Set-Location -Path $currentDir
}
